<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <title>Реки</title>
    <link rel="stylesheet" href="css/editor.css">
    <link rel="stylesheet" href="css/bootstrap.min.css">
    <link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap/dist/css/bootstrap.min.css"/>
    <link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.css"/>

    <script type="text/javascript" src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script type="text/javascript" src="js/bootstrap.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script type="text/javascript" src="https://unpkg.com/vue-select@2.4.0/dist/vue-select.js"></script>
    <script type="text/javascript" src="//unpkg.com/babel-polyfill@latest/dist/polyfill.min.js"></script>
    <script type="text/javascript" src="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.js"></script>

    <!--gallery-->
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/blueimp-gallery@2.27.0/css/blueimp-gallery.min.css">
    <script type="text/javascript" src="https://unpkg.com/blueimp-gallery@2.27.0/js/blueimp-helper.js"></script>
    <script type="text/javascript" src="https://unpkg.com/blueimp-gallery@2.27.0/js/blueimp-gallery.js"></script>
    <script type="text/javascript"
            src="https://unpkg.com/blueimp-gallery@2.27.0/js/blueimp-gallery-fullscreen.js"></script>
    <script type="text/javascript" src="https://unpkg.com/vue-gallery@1.4.0/dist/js/vue-gallery.min.js"></script>
    <!--end of gallery-->
    <script src="https://unpkg.com/vue-upload-component"></script>

    <script type="text/javascript" src="js/editor.js"></script>
    <script type="text/javascript" src="js/auth.js"></script>
    <script type="text/javascript" src="https://api-maps.yandex.ru/2.1/?lang=ru_RU"></script>
    <script type="text/javascript" src="js/map-common.js"></script>
</head>
<body>

<div id="wwmap">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
                <a class="nav-link" href="#">Редактор</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Что-то ещё</a>
            </li>
        </ul>
        <auth/>
    </nav>

    <div class="container-fluid" style="margin-top: 20px;">
        <div class="row">
            <div class="col-3" id="left-menu">
                <ul>
                    <country v-bind:key="country.id" v-bind:country="country" v-for="country in countries"/>
                </ul>
            </div>
            <div id="editor-pane" class="col-9" style="bgcolor:red;">
                <div>
                    <region-editor v-if="regioneditorstate.visible" v-bind:region="regioneditorstate.region"
                                   v-bind:reports="regioneditorstate.reports"/>
                </div>
                <div>
                    <river-editor v-if="rivereditorstate.visible" v-bind:river="rivereditorstate.river"
                                  v-bind:reports="rivereditorstate.reports"/>
                </div>
                <div>
                    <spot-editor v-if="spoteditorstate.visible" v-bind:initial-spot="spoteditorstate.spot"/>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">

</script>

<!--Country component-->
<div id="country-template" style="display:none">
    <li class="menu-item country-menu-item"><a
            href="#" v-on:click='changeExpandState()' class="title-link btn btn-outline-success">{{ country.title }}</a>
        <ul>
            <region v-bind:key="region.id" v-bind:region="region" v-for="region in regions"/>
        </ul>
        <ul>
            <li>
                <ul>
                    <river v-bind:key="river.id" v-bind:river="river" v-for="river in rivers"/>
                </ul>
            </li>
        </ul>
    </li>
</div>

<script type="text/javascript">

    Vue.component('country', {
        props: ['country'],
        template: document.getElementById('country-template').innerHTML,
        data: function() {
            return {
                regions: [],
                rivers: [],
                expand:function () {
                    this.regions = getRegions(this.country.id)
                    this.rivers = getRiversByCountry(this.country.id)
                },
                collapse:function () {
                    this.regions=[]
                    this.rivers=[]
                },
                changeExpandState:function(){
                    if (this.rivers.length==0 && this.regions.length==0) {
                        this.expand();
                    } else {
                        this.collapse();
                    }
                }
            }
        }
    });


</script>
<!--End of country component-->

<!--Region component-->
<div id="region-template" style="display:none">
    <li class="menu-item region-menu-item"><a href="#" v-on:click='changeExpandState();selectRegion();'
                                              class="title-link btn btn-outline-secondary">{{ region.title }}</a>
        <ul>
            <river v-bind:key="river.id" v-bind:river="river" v-for="river in rivers"/>
        </ul>
    </li>
</div>

<script type="text/javascript">
    Vue.component('region', {
        props: ['region'],
        template: document.getElementById('region-template').innerHTML,
        data: function () {
            return {
                rivers: [],
                expand:function () {
                    this.rivers = getRiversByRegion(-1, this.region.id)
                },
                collapse:function () {
                    this.rivers=[]
                },
                changeExpandState:function(){
                    if (this.rivers.length==0) {
                        this.expand();
                    } else {
                        this.collapse();
                    }
                },
                selectRegion:function() {
                    app.spoteditorstate.visible = false
                    app.rivereditorstate.visible=false;
                    app.regioneditorstate.visible = false;

                    app.regioneditorstate.region = getRegion(this.region.id)
                    app.regioneditorstate.editMode = false;
                    app.regioneditorstate.visible = true
                },
            }
        },
    });

</script>
<!--End of region component-->

<!--River component-->
<div id="river-template" style="display:none">
    <li class="menu-item river-menu-item"><a href="#" v-on:click='changeExpandState();selectRiver();'
                                             class="title-link btn btn-outline-info">{{ river.title }}</a>
        <ul>
            <li class="menu-item spot-menu-item" v-on:click.stop="selectSpot(spot)" v-for="spot in spots"><a href="#"
                                                                                                             class="title-link btn btn-outline-primary">{{spot.title}}</a>
            </li>
        </ul>
    </li>
</div>

<script type="text/javascript">
    Vue.component('river', {
        props: ['river'],
        template: document.getElementById('river-template').innerHTML,
        data: function () {
            return {
                spots: [],
                expand:function() {
                    this.spots = getSpots(this.river.id)
                },
                collapse:function () {
                    this.spots=[]
                },
                changeExpandState:function(){
                    if (this.spots.length==0) {
                        this.expand();
                    } else {
                        this.collapse();
                    }
                },
                selectSpot:function(spot) {
                    app.spoteditorstate.visible = false
                    app.rivereditorstate.visible=false;
                    app.regioneditorstate.visible = false;

                    app.spoteditorstate.visible=true;
                    app.spoteditorstate.editMode = false;
                    app.spoteditorstate.spot=getSpot(spot.id)
                },
                selectRiver:function() {
                    app.spoteditorstate.visible = false
                    app.rivereditorstate.visible=false;
                    app.regioneditorstate.visible = false;

                    app.rivereditorstate.river = getRiver(this.river.id)
                    app.rivereditorstate.editMode = false;
                    app.rivereditorstate.reports=getReports(this.river.id)
                    app.rivereditorstate.visible = true
                },
            }
        },
    });
</script>
<!--End of river component-->

<!--Category display-->
<div id="category-template" style="display:none">
    <div style="display:inline">{{ categoryString() }}</div>
</div>
<script type="text/javascript">
    Vue.component('category', {
        props: ['category'],
        template: document.getElementById('category-template').innerHTML,
        data: function () {
            return {
                categoryString: function() {
                    if (this.category=="0") {
                        return "-"
                    }
                    if (this.category=="-1") {
                        return "Непроход."
                    }
                    return this.category
                }
            }
        },
    })
</script>
<!--End of category display-->


<!--Spot editor component-->
<div id="spotEditor-template" style="display:none">
    <div>
        <transition name="fade">
            <div class="alert alert-danger" role="alert" v-if="errMsg">
                {{errMsg}}
            </div>
        </transition>
        <ask id="del-spot" title="Точно?" msg="Совсем удалить?" :okfn="function() { remove(); }"></ask>

        <div v-if="canEdit()" class="btn-toolbar">
            <div class="btn-group mr-2" role="group" aria-label="First group">
                <button type="button" class="btn btn-info" v-on:click="editMode=!editMode; hideError();">
                    {{getEditModeButtonTitle()}}
                </button>
                <button type="button" class="btn btn-success" v-on:click="save()">Сохранить</button>
                <button type="button" class="btn btn-secondary" v-on:click="editMode=!editMode; reload()">Отменить</button>
            </div>
            <div class="btn-group">
                <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#del-spot">Удалить
                </button>
            </div>
        </div>

        <div v-if="editMode" class="spot-editor-panel" style="padding-top:15px;">
            <b-tabs>
                <b-tab title="Главное" active>
                    <div class="container-fluid" style="margin-top: 20px;">
                        <div class="row">
                            <div class="col-6">
                                <div class="short-div">
                                    <strong>Название: </strong>
                                    <input v-model.trim="spot.title" style="display:block; width: 100%;"/>
                                </div>
                                <div class="short-div">
                                    <strong>Река: </strong>
                                    <v-select v-model="spot.river" label="name" :filterable="false" :options="options"
                                              @search="onSearch">
                                        <template slot="no-options">
                                            Начните печатать название реки
                                        </template>
                                        <template slot="option" slot-scope="option">
                                            <div class="d-center">
                                                {{ option.title }}
                                            </div>
                                        </template>
                                        <template slot="selected-option" scope="option">
                                            <div class="selected d-center">
                                                {{ option.title }}
                                            </div>
                                        </template>
                                    </v-select>
                                </div>
                                <div class="short-div">
                                    <strong>Категория сложности: </strong><a target="_blank"
                                                                             href="https://huskytm.ru/rules2018-2019/#categories_tab"><img
                                        src="img/question_16.png"></a>
                                    <dl style="padding-left:40px;">
                                        <dt>По классификатору</dt>
                                        <dd>
                                            <select v-model="spot.category">
                                                <option v-for="cat in all_categories" v-bind:value="cat.id">{{cat.title}}</option>
                                            </select>
                                        </dd>
                                        <dt>Низкий уровень воды</dt>
                                        <dd>
                                            <select v-model="spot.lw_category">
                                                <option v-for="cat in all_categories" v-bind:value="cat.id">{{cat.title}}</option>
                                            </select>
                                        </dd>
                                        <dt>Средний уровень воды</dt>
                                        <dd>
                                            <select v-model="spot.mw_category">
                                                <option v-for="cat in all_categories" v-bind:value="cat.id">{{cat.title}}</option>
                                            </select>
                                        </dd>
                                        <dt>Высокий уровень воды</dt>
                                        <dd>
                                            <select v-model="spot.hw_category">
                                                <option v-for="cat in all_categories" v-bind:value="cat.id">{{cat.title}}</option>
                                            </select>
                                        </dd>
                                    </dl>
                                </div>
                            </div>
                            <div class="col-6">
                                <strong>Расположение: </strong>
                                <ya-map-location ref="locationEdit" v-bind:spot="spot" width="100%" :editable="true"></ya-map-location>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-2"><strong>Описание: </strong></div>
                        <div class="col-10"><textarea rows="10" cols="120" v-model="spot.short_description"></textarea></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><strong>Ориентиры:</strong></div>
                        <div class="col-10"><textarea rows="10" style="width:100%" v-model="spot.orient"></textarea></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><strong>Подход/выход:</strong></div>
                        <div class="col-10"><textarea rows="10" cols="120" v-model="spot.approach"></textarea></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><strong>Страховка:</strong></div>
                        <div class="col-10"><textarea rows="10" cols="120" v-model="spot.safety"></textarea></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><strong>Описание для низкого уровня воды:</strong></div>
                        <div class="col-10"><textarea rows="10" cols="120" v-model="spot.lw_description"></textarea></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><strong>Описание для среднего уровня воды:</strong></div>
                        <div class="col-10"><textarea rows="10" cols="120" v-model="spot.mw_description"></textarea></div>
                    </div>
                    <div class="row">
                        <div class="col-2"><strong>Описание для высокого уровня воды:</strong></div>
                        <div class="col-10"><textarea rows="10" cols="120" v-model="spot.hw_description"></textarea></div>
                    </div>
                </b-tab>
                <b-tab title="Схемы">
                    <img-upload :spot="spot" type="schema"></img-upload>
                </b-tab>
                <b-tab title="Фото">
                    <img-upload :spot="spot" type="photo"></img-upload>
                </b-tab>
                <b-tab title="Видео" disabled>
                </b-tab>
            </b-tabs>
        </div>
        <div v-else class="spot-display">
            <div class="container-fluid" style="margin-top: 20px;">
                <div class="row">
                    <div class="col-7">
                        <div class="short-div">
                            <h1>{{ spot.title }}</h1>
                        </div>
                        <div class="short-div">
                            {{ spot.short_description }}
                        </div>
                        <div class="short-div">
                            <strong>Ориентиры:</strong><br/>
                            {{ spot.orient }}
                        </div>
                    </div>
                    <div class="col-5">
                        <img v-if="spot.preview" :src="spot.preview" style="width:100%"/>
                        <img v-else src="img/no-photo.png" style="width:100%"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-7">
                        <div class="container-fluid" style="padding-bottom:15px;">
                            <div class="row">
                                <div class="col-4"><strong>Уровень воды</strong></div>
                                <div class="col-8"><strong>Тех. описание</strong></div>
                            </div>
                            <div class="row">
                                <div class="col-4"><strong>Низкая вода</strong></div>
                                <div class="col-8">{{ spot.lw_description }}</div>
                            </div>
                            <div class="row">
                                <div class="col-4"><strong>Средняя вода</strong></div>
                                <div class="col-8">{{ spot.mw_description }}</div>
                            </div>
                            <div class="row">
                                <div class="col-4"><strong>Высокая вода</strong></div>
                                <div class="col-8">{{ spot.hw_description }}</div>
                            </div>
                        </div>

                        <div v:if="spot.approach" class="short-div">
                            <strong>Подход/выход</strong>
                            <td colspan="2">{{ spot.approach }}</td>
                        </div>
                        <div v:if="spot.safety" class="short-div">
                            <strong>Страховка</strong>
                            <td colspan="2">{{ spot.safety }}</td>
                        </div>
                    </div>
                    <div class="col-5">
                        <strong>Расположение: </strong>
                        <ya-map-location ref="locationView" v-bind:spot="spot" width="100%" :editable="false"></ya-map-location>
                        <div class="short-div">
                            <strong>Координаты:</strong><br/><strong>Широта:</strong>&nbsp;{{ spot.point[0] }}
                            <br/><strong>Долгота:</strong>&nbsp;{{ spot.point[1] }}
                            <br/>
                            <div><strong>К.с. нв/св/вв:</strong>&nbsp;<category :category="spot.lw_category"></category>/<category :category="spot.mw_category"></category>/<category :category="spot.hw_category"></category></div>
                            <div><strong>К.с. по классификатору:</strong>&nbsp;<category :category="spot.category"></category></div>
                        </div>
                    </div>
                </div>
            </div>
            <div v-if="schemas.length">
                <h2>Схемы</h2>
                <div>
                    <gallery id="schemas-gallery" :images="schemas" :index="schIndex" @close="schemaIndex = null"></gallery>
                    <div
                            class="image wwmap-gallery-cell"
                            v-for="schema, schemaIndex in schemas"
                            @click="schIndex = schemaIndex"
                            :style="{ backgroundImage: 'url(' + schema + ')' }"
                    ></div>
                </div>
            </div>
            <div v-if="images.length">
                <h2>Фото галерея</h2>
                <div>
                    <gallery id="image-gallery" :images="images" :index="imgIndex" @close="imageIndex = null"></gallery>
                    <div
                            class="image wwmap-gallery-cell"
                            v-for="image, imageIndex in images"
                            @click="imgIndex = imageIndex"
                            :style="{ backgroundImage: 'url(' + image + ')' }"
                    ></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    Vue.component('spot-editor', {
        props: ['initialSpot'],
        template: document.getElementById('spotEditor-template').innerHTML,

        methods: {
            onSearch: function(search, loading) {
                loading(true);
                var component = this
                fetch(
                  `${apiBase}/river?q=${search}`
                ).then(res => {
                    res.json().then(function(json){
                        component.options = json
                    });
                    loading(false);
                });
            },
        },
        updated: function() {
            // It's an ugly hack. I really do not know, why child's update lifecycle handler method is not called on spot changed
            // Maybe computed properties are not allowed in v-bind ?
            if (this.editMode) {
                this.$refs.locationEdit.doUpdate()
            } else {
                this.$refs.locationView.doUpdate()
            }
        },
        computed: {
                spot:function () { return this.initialSpot },
                images: function () {return getImages(this.initialSpot.id, "image").map(x => x.url)},
                schemas: function () {return getImages(this.initialSpot.id, "schema").map(x => x.url)},
        },
        data:function() {
            return {
                // for editor
                userInfo: getAuthorizedUserInfoOrNull(),
                map: null,
                label: null,
                canEdit: function(){
                 return this.userInfo!=null && this.userInfo.roles.includes("ADMIN")
                },
                editMode: app.spoteditorstate.editMode,
                errMsg:null,
                askForRemove: false,
                save:function() {
                    updated = saveSpot(this.spot)
                    if (updated) {
                        this.spot = updated
                        this.editMode=false
                        this.reloadImgs()
                        this.hideError()
                    } else {
                        this.showError("Не удалось сохранить препятствие. Возможно, недостаточно прав")
                    }
                },
                reload:function() {
                    this.spot = getSpot(this.spot.id)
                    this.reloadImgs()
                    this.hideError()
                },
                reloadImgs: function() {
                    this.images = getImages(this.initialSpot.id, "image").map(x => x.url)
                    this.imgIndex = null
                    this.schemas = getImages(this.initialSpot.id, "schema").map(x => x.url)
                    this.schIndex = null
                },
                remove: function() {
                    this.hideError()
                    if (!removeSpot(this.spot.id)) {
                        this.showError("Can not delete")
                    }
                },
                showError: function(errMsg) {
                    this.errMsg = errMsg
                },
                hideError: function(errMsg) {
                    this.errMsg = null
                },
                getEditModeButtonTitle: function() {
                    return this.editMode ? 'Просмотр' : 'Редактирование';
                },
                // end of editor
                all_categories:all_categories,

                options: [getRiver(this.initialSpot.river.id)],

                // imgs
                imgIndex: null,
                schIndex: null,
            }
        }
    });

</script>
<!--End of spot editor component-->

<!--Image list component-->
<div id="img-upload-template" style="display:none">
    <div>
        <template>
            <div class="example-drag">
                <div class="upload" style="margin-top:15px;">
                    <ul v-if="files.length">
                        <li v-for="(file, index) in files" :key="file.id">
                            <span>{{file.name}}</span> -
                            <span>{{file.size}}</span> -
                            <span v-if="file.error">{{file.error}}</span>
                            <span v-else-if="file.success">success</span>
                            <span v-else-if="file.active">active</span>
                            <span v-else-if="file.active">active</span>
                            <span v-else></span>
                        </li>
                    </ul>

                    <div class="example-btn">
                        <file-upload
                                class="btn btn-primary"
                                :post-action="uploadPath"
                                extensions="gif,jpg,jpeg,png"
                                accept="image/png,image/gif,image/jpeg"
                                :multiple="true"
                                :drop="true"
                                :drop-directory="true"
                                v-model="files"
                                :ref="type">
                            <i class="fa fa-plus"></i>
                            Выбрать изображения
                        </file-upload>
                        <button type="button" class="btn btn-success" v-if="!$refs[type] || !$refs[type].active"
                                @click.prevent="$refs[type].active = true">
                            <i class="fa fa-arrow-up" aria-hidden="true"></i>
                            Начать загрузку
                        </button>
                        <button type="button" class="btn btn-danger" v-else
                                @click.prevent="$refs[type].active = false">
                            <i class="fa fa-stop" aria-hidden="true"></i>
                            Остановить загрузку
                        </button>
                    </div>
                </div>
            </div>
        </template>
        <table>
            <tr>
                <td></td>
                <td>Ссылка на источник</td>
                <td></td>
            </tr>
            <tr v-for="image in images">
                <td><img :class="imageClass(image)" :src="image.preview_url"/></td>
                <td>
                    <div v-if="image.source=='wwmap'">Загружено пользователем</div>
                    <a v-else target="_blank" :href="image.report_url">{{image.report_title}}</a>
                </td>
                <td>
                    <button v-if="image.enabled==false" v-on:click="setImgEnabled(true, image.id)">Показывать</button>
                    <button v-if="image.enabled==true" v-on:click="setImgEnabled(false, image.id)">Не показывать
                    </button>
                    <button v-if="image.source=='wwmap'" v-on:click="removeImage(image.id)">Удалить</button>
                </td>
            </tr>
        </table>
    </div>
</div>
<script type="text/javascript">
    Vue.component('img-upload', {
        template: document.getElementById('img-upload-template').innerHTML,
        props: ['spot', 'type'],
        components: {
          FileUpload: VueUploadComponent
        },
        updated: function() {
            if(this.$refs.upload && this.$refs.upload.value.length && this.$refs.upload.uploaded) {
                if (this.imagesOutOfDate) {
                    setTimeout(() => {
                        this.refresh()
                    }, 700);
                    this.imagesOutOfDate = false
                } else {
                    this.imagesOutOfDate = true
                }
            }
        },
        data:function() {
            return {
                images: getImages(this.spot.id, this.type),
                imagesOutOfDate: true,
                files: [],
                uploadPath: apiBase + "/spot/" + this.spot.id +"/img?type=" + this.type,
                removeImage: function(imgId) {
                    this.images = removeImage(this.spot.id, imgId, this.type);
                },
                setImgEnabled: function(enabled, imgId) {
                    this.images = setImageEnabled(this.spot.id, imgId, enabled);
                },
                refresh:function() {
                        this.images = getImages(this.spot.id, this.type)
                },
                imageClass:function(image) {
                    if(image.enabled==false) {
                        return "wwmap-img-disabled"
                    }
                    return ""
                }
            }
        },
    });

</script>
<!--End of image list component-->

<!--Ya maps component-->
<div id="ya-map-location-template" style="display:none">
    <div id="map" :style="mapDivStyle()"></div>
</div>
<!--End of Ya maps component-->
<script type="text/javascript">
    Vue.component('ya-map-location', {
        template: document.getElementById('ya-map-location-template').innerHTML,
        props: {
            spot: Object,
            width: {
                type: String,
                default: "600px",
            },
            height: {
                type: String,
                default: "400px",
            },
            editable: {
                type: Boolean,
                default: false,
            },
        },
        updated: function() {
            this.doUpdate()
        },
        created: function() {
            var component = this
            ymaps.ready(function() {
                if (component.map) {
                    component.map.destroy()
                    component.label.geometry.setCoordinates(component.spot.point);
                } else {
                    addCachedLayer('osm#standard', 'OSM', 'OpenStreetMap contributors, CC-BY-SA', 'osm')
                    addLayer('google#satellite', 'Спутник Google', 'Изображения © DigitalGlobe,CNES / Airbus, 2018,Картографические данные © Google, 2018', GOOGLE_SAT_TILES)
                    addCachedLayer('ggc#standard', 'Топографическая карта', '', 'ggc', 0, 15)
                }

                var myMap = new ymaps.Map("map", {
                    center: component.spot.point,
                    zoom: 12,
                    controls: ["zoomControl"],
                    type: "osm#standard",
                });
                myMap.controls.add(
                    new ymaps.control.TypeSelector([
                        'osm#standard',
                        'ggc#standard',
                        'yandex#satellite',
                        'google#satellite',
                    ])
                );
                component.map = myMap


                component.addObjectManager()
                component.addLabel()


            })
        },
        data: function() {
            return {
                mapDivStyle: function() {
                    return 'width: ' + this.width + '; height: ' + this.height + ';'
                },
                doUpdate: function() {
                    if (this.map) {
                        this.map.setCenter(this.spot.point)

                        this.map.geoObjects.remove(this.label)
                        this.addLabel()

                        this.map.geoObjects.remove(this.objectManager)
                        this.addObjectManager()
                    }
                },
                objectManagerUrlTemplate: function() {
                    var skip = 0
                    if (this.spot && this.spot.id) {
                        skip = this.spot.id
                    }
                    return apiBase + '/ymaps-tile-ww?bbox=%b&zoom=%z&skip=' + skip
                },
                addObjectManager:function() {
                        var objectManager = new ymaps.RemoteObjectManager(this.objectManagerUrlTemplate(), {
                        clusterHasBalloon: false,
                        geoObjectOpenBalloonOnClick: false,
                        geoObjectStrokeWidth: 3,
                        splitRequests: true,
                        clusterHasBalloon: false,
                    });
                    this.map.geoObjects.add(objectManager);
                    this.objectManager = objectManager
                },
                addLabel: function() {
                    var component = this
                    var label = new ymaps.GeoObject({
                        geometry: {
                            type: "Point",
                            coordinates: this.spot.point
                        },
                        properties: {
                            hintContent: this.spot.title,
                        }
                    }, {
                        preset: 'islands#blueIcon',
                        draggable: this.editable,
                    })
                    label.events.add('dragend', function (e) {
                        component.spot.point = label.geometry.getCoordinates()
                    });

                    if (this.editable) {
                        this.map.events.add('click', function (e) {
                            p = e.get('coords')
                            label.geometry.setCoordinates(p)
                            component.spot.point = p
                        });
                    }

                    this.map.geoObjects.add(label)
                    this.label = label
                },
            }
        },
    });

</script>


<!--river editor component-->
<div id="river-editor-template" style="display:none">
    <div>
        <transition name="fade">
            <div class="alert alert-danger" role="alert" v-if="errMsg">
                {{errMsg}}
            </div>
        </transition>
        <ask id="del-river" title="Точно?"
             msg="Совсем удалить? Все пороги будут также удалены! Да, совсем! Восстановить будет никак нельзя!"
             :okfn="function() { remove(); }"></ask>

        <div v-if="canEdit()" class="btn-toolbar">
            <div v-if="river.id" class="btn-group mr-2" role="group">
                <button type="button" class="btn btn-primary" v-on:click="add_spot()">Добавить препятствие</button>
            </div>
            <div class="btn-group mr-2" role="group" aria-label="First group">
                <button type="button" class="btn btn-info" v-on:click="editMode=!editMode; hideError();">
                    {{getEditModeButtonTitle()}}
                </button>
                <button type="button" class="btn btn-success" v-on:click="save()">Сохранить</button>
                <button type="button" class="btn btn-secondary" v-on:click="reload()">Отменить</button>
            </div>
            <div class="btn-group">
                <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#del-river">Удалить
                </button>
            </div>
        </div>

        <input v-if="editMode" v-model.trim="river.title" style="display:block"/>
        <h1 v-else>{{ river.title }}</h1>
        <dl>
            <dt>Регион:</dt>
            <dd>
                <div v-if="editMode">
                    <select v-model="river.region.id">
                        <option v-for="region in regions" v-bind:value="region.id">{{region.title}}</option>
                    </select>
                </div>
                <div v-else style="padding-left:40px;">
                    {{river.region.title}}
                </div>
            </dd>
            <dt>Алиасы:</dt>
            <dd>
                <textarea v-if="editMode" v-bind:text-content="river.aliases"
                          v-on:input="river.aliases = parseAliases($event.target.value)"
                          rows="10" cols="120"
                          style="resize: none; margin-left:40px;">{{ river.aliases.join('\n') }}</textarea>
                <ul v-else>
                    <li v-for="alias in river.aliases">{{alias}}</li>
                </ul>

            </dd>
            <dt>Отчёты:</dt>
            <dd>
                <ul>
                    <li v-for="report in reports"><a target="_blank" :href="report.url">{{report.title}}</a></li>
                </ul>
            </dd>
        </dl>
        <div v-if="canEdit() && river.id && !editMode">
            <template>
                <div class="example-drag">
                    <div class="upload">
                        <ul v-if="files.length">
                            <li v-for="(file, index) in files" :key="file.id">
                                <span>{{file.name}}</span> -
                                <span>{{file.size}}</span> -
                                <span v-if="file.error">{{file.error}}</span>
                                <span v-else-if="file.success">success</span>
                                <span v-else-if="file.active">active</span>
                                <span v-else-if="file.active">active</span>
                                <span v-else></span>
                            </li>
                        </ul>

                        <div v-show="$refs.upload && $refs.upload.dropActive" class="drop-active">
                            <h3>Drop files to upload</h3>
                        </div>

                        <div class="example-btn">
                            <file-upload
                                    class="btn btn-primary"
                                    :post-action="uploadPath"
                                    extensions="gpx"
                                    :multiple="false"
                                    :drop="false"
                                    :drop-directory="false"
                                    v-model="files"
                                    ref="uploadGpx">
                                <i class="fa fa-plus"></i>
                                Выберите GPX-файл с точками препятствий.
                            </file-upload>
                            <button type="button" class="btn btn-success" v-if="!$refs.uploadGpx || !$refs.uploadGpx.active"
                                    @click.prevent="$refs.uploadGpx.active = true">
                                <i class="fa fa-arrow-up" aria-hidden="true"></i>
                                Начать загрузку
                            </button>
                            <button type="button" class="btn btn-danger" v-else
                                    @click.prevent="$refs.uploadGpx.active = false">
                                <i class="fa fa-stop" aria-hidden="true"></i>
                                Stop Upload
                            </button>
                        </div>
                    </div>
                </div>
            </template>
        </div>
    </div>
</div>

<script type="text/javascript">
    Vue.component('river-editor', {
        props: ['river', 'reports'],
        template: document.getElementById('river-editor-template').innerHTML,
        components: {
          FileUpload: VueUploadComponent
        },
        updated: function() {
            if(this.$refs.uploadGpx && this.$refs.uploadGpx.value.length && this.$refs.uploadGpx.uploaded) {
                if (this.imagesOutOfDate) {
                    setTimeout(() => {
                        this.refresh()
                    }, 700);
                    this.imagesOutOfDate = false
                } else {
                    this.imagesOutOfDate = true
                }
            }
        },
        data:function() {
            return {
                // for editor
                userInfo: getAuthorizedUserInfoOrNull(),
                canEdit: function(){
                 return this.userInfo!=null && this.userInfo.roles.includes("ADMIN")
                },
                editMode: app.rivereditorstate.editMode,
                errMsg:null,
                askForRemove: true,
                save:function() {
                    updated = saveRiver(this.river)
                    if (updated) {
                        this.river = updated
                        this.editMode=false
                        this.hideError()
                    } else {
                        this.showError("Не удалось сохранить реку. Возможно, недостаточно прав")
                    }
                },
                reload:function() {
                    this.river = getRiver(this.river.id)
                    this.hideError()
                },
                remove: function() {
                    this.hideError()
                    if (!removeRiver(this.river.id)) {
                        this.showError("Can not delete")
                    }
                },
                showError: function(errMsg) {
                    this.errMsg = errMsg
                },
                hideError: function(errMsg) {
                    this.errMsg = null
                },
                getEditModeButtonTitle: function() {
                    return this.editMode ? 'Просмотр' : 'Редактирование';
                },
                // end of editor

                files: [],
                uploadPath: apiBase + "/river/" + this.river.id +"/gpx",
                add_spot: function() {
                    app.spoteditorstate.visible = false
                    app.rivereditorstate.visible = false;

                    app.spoteditorstate.visible = true;
                    app.spoteditorstate.editMode = true;
                    app.spoteditorstate.spot={
                        id: 0,
                        river: this.river,
                        point:[0.0, 0.0, ],
                    }
                },

                regions: getAllRegions(),
                parseAliases:function(strVal) {
                    return strVal.split('\n').map(function(x) {return x.trim()}).filter(function(x){return x.length>0})
                },
            }
        }
    });

</script>
<!--End of river editor component-->

<!--region editor component-->
<div id="region-editor-template" style="display:none">
    <div>
        <div v-if="canEdit()" class="btn-toolbar">
            <div class="btn-group mr-2" role="group">
                <button type="button" class="btn btn-primary" v-on:click="add_river()">Добавить реку</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    Vue.component('region-editor', {
        props: ['region'],
        template: document.getElementById('region-editor-template').innerHTML,
        data:function() {
            return {
                // for editor
                userInfo: getAuthorizedUserInfoOrNull(),
                canEdit: function(){
                 return this.userInfo!=null && this.userInfo.roles.includes("ADMIN")
                },
                
                getEditModeButtonTitle: function() {
                    return this.editMode ? 'Просмотр' : 'Редактирование';
                },
                // end of editor

                add_river: function() {
                    app.spoteditorstate.visible = false
                    app.rivereditorstate.visible = false;
                    app.regioneditorstate.visible = false;

                    app.rivereditorstate.visible = true;
                    app.rivereditorstate.editMode = true;
                    app.rivereditorstate.river = {
                        id: 0,
                        region: this.region,
                        aliases: [],
                    }
                },

                regions: getAllRegions(),
                parseAliases:function(strVal) {
                    return strVal.split('\n').map(function(x) {return x.trim()}).filter(function(x){return x.length>0})
                },
            }
        }
    });

</script>
<!--End of region editor component-->

<!--Auth component-->
<div id="auth-template" style="display:none">
    <div class="auth" v-if="userInfo">
        <div>Привет, {{userInfo.first_name}}&nbsp;{{userInfo.last_name}}!</div>
        <a href="javascript:clearToken(); location.reload();">Выход</a>
    </div>
    <div class="auth" v-else>
        <div>Здравствуйте! Для редактирования надо</div>
        <a href="javascript:forceRedirect();">авторизоваться через Яндекс</a>
    </div>
</div>
<script type="text/javascript">
    Vue.component('auth', {
        template: document.getElementById('auth-template').innerHTML,
        data: function() {
            return {
                userInfo: getAuthorizedUserInfoOrNull()
            }
        }
    });

</script>
<!--End of auth component-->

<!--Modal dialog component-->
<div id="ask-template" style="display:none;">
    <div :id="id" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">{{ title }}</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>{{ msg }}</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal" v-on:click="okfn()">Да</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Нет</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    Vue.component('ask', {
        template: document.getElementById('ask-template').innerHTML,
        props: ['id', 'msg', 'title', 'okfn'],
    });

</script>
<!--End of modal dialog component-->

<script type="text/javascript">
    Vue.component('v-select', VueSelect.VueSelect)
    Vue.component('gallery', VueGallery)
    Vue.component('file-upload', VueUploadComponent)
    var app = new Vue({
        el: '#wwmap',
        data: {
          countries: getCountries(),
          regions: getAllRegions(),
          "spoteditorstate": {
            "visible": false,
            "editMode": false,
          },
          "rivereditorstate": {
            "visible": false,
            "editMode": false,
          },
          "regioneditorstate": {
            "visible": false,
            "editMode": false,
          },
        }
    })

</script>

</body>
</html>