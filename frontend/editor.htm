<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <title>Редактор</title>
    <link rel="icon" href="favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon" />

    <link rel="stylesheet" href="css/main.css">
    <link rel="stylesheet" href="css/editor.css">
    <link rel="stylesheet" href="css/bootstrap.min.css">
    <link type="text/css" rel="stylesheet" href="css/bootstrap.min.css"/>
    <link type="text/css" rel="stylesheet" href="css/bootstrap-vue.css"/>

    <script type="text/javascript" src="js-editor/polyfill.min.js"></script>
    <script type="text/javascript" src="js-editor/tether.min.js"></script>
    <script type="text/javascript" src="js/jquery-3.1.1.min.js"></script>
    <script type="text/javascript" src="js-editor/jquery.uuid.js"></script>
    <script type="text/javascript" src="js/jquery.cookie.js"></script>
    <script type="text/javascript" src="js-editor/popper.min.js"></script>
    <script type="text/javascript" src="js-editor/bootstrap.min.js"></script>
    <script type="text/javascript" src="js-editor/vue.js"></script>
    <script type="text/javascript" src="js-editor/vue-select.js"></script>
    <script type="text/javascript" src="js-editor/bootstrap-vue.js"></script>
    <script type="text/javascript" src="js-editor/sensors.js"></script>
    <script type="text/javascript" src="js-editor/sortable.min.js"></script>
    <script type="text/javascript" src="js-editor/inputmask.min.js"></script>
    <script type="text/javascript" src="js-editor/coord-marshaller.js"></script>

    <!--gallery-->
    <link rel="stylesheet" type="text/css" href="css/blueimp-gallery.min.css">
    <script type="text/javascript" src="js-editor/blueimp-helper.js"></script>
    <script type="text/javascript" src="js-editor/blueimp-gallery.js"></script>
    <script type="text/javascript" src="js-editor/blueimp-gallery-fullscreen.js"></script>
    <script type="text/javascript" src="js-editor/vue-gallery.min.js"></script>
    <!--end of gallery-->

    <script type="text/javascript" src="js-editor/vuejs-datepicker.min.js"></script>

    <script src="js-editor/vue-upload-component.js"></script>
    <script src="js-editor/http-vue-loader.js"></script>

    <script type="text/javascript" src="js-editor/api.js"></script>
    <script type="text/javascript" src="js-editor/editor.js"></script>
    <script type="text/javascript" src="js-editor/auth.js"></script>
    <script type="text/javascript" src="https://api-maps.yandex.ru/2.1/?lang=ru_RU"></script>
    <script type="text/javascript" src="js-editor/map-common.js"></script>
    <script type="application/javascript" src="js/tube.js"></script>
</head>
<body>

<div id="vue-app">
    <ask id="close-spot-editor" title="Отменить редактирование?"
         msg='Открыт редактор порога. Там могут быть ваши изменения. Для сохранения воспользуйтесь кнопкой "Сохранить" сверху. Закрыть редактор и сбросить изменения?'
         :ok-fn="function() { spoteditorstate.editMode = false; if(closeCallback) {closeCallback()}}"></ask>
    <ask id="close-river-editor" title="Отменить редактирование?"
         msg='Открыт редактор реки. Там могут быть ваши изменения. Для сохранения воспользуйтесь кнопкой "Сохранить" сверху. Закрыть редактор и сбросить изменения?'
         :ok-fn="function() { rivereditorstate.pageMode = 'view'; if(closeCallback) {closeCallback()} }"></ask>

    <page link="editor.htm">
        <div class="container-fluid" style="margin-top: 20px;">
            <div class="row">
                <div class="col-3" id="left-menu">
                    <ul>
                        <country v-bind:key="country.id" v-bind:country="country" v-for="country in countries"/>
                    </ul>
                </div>
                <div id="editor-pane" class="col-9" style="bgcolor:red;">
                    <transition name="fade">
                        <div class="alert alert-danger" role="alert" v-if="errMsg">
                            {{errMsg}}
                        </div>
                    </transition>
                    <div>
                        <country-editor v-if="countryeditorstate.visible"
                                        v-bind:country="countryeditorstate.country"/>
                    </div>
                    <div>
                        <region-editor v-if="regioneditorstate.visible" v-bind:region="regioneditorstate.region"
                                        v-bind:country="regioneditorstate.country"/>
                    </div>
                    <div>
                        <river-editor v-if="rivereditorstate.visible" v-bind:initial-river="rivereditorstate.river"
                                      v-bind:reports="rivereditorstate.reports"
                                      v-bind:country="rivereditorstate.country"
                                      v-bind:region="rivereditorstate.region"
                                      v:sensors="sensors"/>
                    </div>
                    <div>
                        <spot-editor v-if="spoteditorstate.visible" v-bind:initial-spot="spoteditorstate.spot"
                                     v-bind:country="spoteditorstate.country" v-bind:region="spoteditorstate.region"/>
                    </div>
                </div>
            </div>
        </div>
    </page>
</div>

<script type="text/javascript">
    Vue.component('v-select', VueSelect.VueSelect);
    Vue.component('gallery', VueGallery);
    Vue.component('file-upload', VueUploadComponent);
    Vue.component('datepicker', vuejsDatepicker);

    Vue.component('window-title', httpVueLoader('components/window-title.vue'));
    Vue.component('ask', httpVueLoader('components/ask.vue'));
    Vue.component('auth', httpVueLoader('components/auth.vue'));
    Vue.component('lat-lon-input', httpVueLoader('components/lat-lon-input.vue'));
    Vue.component('ya-map-location', httpVueLoader('components/ya-map-location.vue'));
    Vue.component('ya-map-location-and-coords', httpVueLoader('components/ya-map-location-and-coords.vue'));
    Vue.component('img-upload', httpVueLoader('components/img-upload.vue'));
    Vue.component('video-add', httpVueLoader('components/video-add.vue'));
    Vue.component('category', httpVueLoader('components/category.vue'));
    Vue.component('props', httpVueLoader('components/props.vue'));
    Vue.component('log', httpVueLoader('components/log.vue'));
    Vue.component('log-dropdown', httpVueLoader('components/log-dropdown.vue'));
    Vue.component('img-date', httpVueLoader('components/img-date.vue'));

    Vue.component('river', httpVueLoader('components/river.vue'));
    Vue.component('region', httpVueLoader('components/region.vue'));
    Vue.component('country', httpVueLoader('components/country.vue'));

    Vue.component('country-editor', httpVueLoader('components/country-editor.vue'));
    Vue.component('region-editor', httpVueLoader('components/region-editor.vue'));
    Vue.component('river-editor', httpVueLoader('components/river-editor.vue'));
    Vue.component('spot-editor', httpVueLoader('components/spot-editor.vue'));

    Vue.component('page', httpVueLoader('components/page.vue'));


    function getById(arr,id) {
        var filtered = arr.filter(function(x) {return x.id===id});
        if (filtered.length>0) {
            return filtered[0]
        }
        return null
    }

    function showCountrySubentities(id) {
        let country = {
            rivers: getRiversByCountry(id),
            regions: getRegions(id)
        };
        Vue.set(app.treePath, id, country);
        return country;
    }

    function showRegionTree(countryId, id) {
        var region = getById(app.treePath[countryId].regions,id);
        Vue.set(region, "rivers", getRiversByRegion(countryId, id));
    }

    function getRiverFromTree(countryId, regionId, id) {
        let river;
        let country = app.treePath[countryId];
        if (!country) {
            country = showCountrySubentities(countryId)
        }

        if (regionId && regionId > 0) {
            var region = getById(country.regions, regionId);
            let rivers = region.rivers;
            if (!rivers) {
                rivers = getRiversByRegion(countryId, region.id);
                Vue.set(region, "rivers", rivers);
            }
            river = getById(rivers, id)
        } else {
            river = getById(country.rivers, id)
        }
        return river;
    }

    function showRiverTree(countryId, regionId, id) {
        var river = getRiverFromTree(countryId, regionId, id);
        Vue.set(river, "spots", getSpots(id))
    }

    function hideRiverTree(countryId, regionId, id) {
        var river = getRiverFromTree(countryId, regionId, id);
        Vue.delete(river, "spots")
    }

    function getSpotsFromTree(countryId, regionId, riverId) {
        var river;
        if (regionId && regionId>0) {
            var region = getById(app.treePath[countryId].regions, regionId);
            river = getById(region.rivers, riverId)
        } else {
            river = getById(app.treePath[countryId].rivers, riverId)
        }
        return river.spots
    }

    function setActiveEntityState(countryId, regionId, riverId, spotId) {
        app.selectedSpot = spotId;
        app.selectedRiver = riverId;
        app.selectedRegion = regionId;
        app.selectedCountry = countryId;
    }

    function newRiver(country, region) {
        app.spoteditorstate.visible = false;
        app.rivereditorstate.visible = false;
        app.regioneditorstate.visible = false;
        app.countryeditorstate.visible = false;

        app.rivereditorstate.visible = true;
        app.rivereditorstate.pageMode = 'edit';
        app.rivereditorstate.river = {
            id: 0,
            region: region,
            aliases: [],
            props: {}
        };
        app.rivereditorstate.country = country;
        app.rivereditorstate.region = region;
    }

    function selectRiver(country, region, id) {
        app.rivereditorstate.river = getRiver(id);
        app.rivereditorstate.pageMode = 'view';
        app.rivereditorstate.reports=getReports(id);
        app.rivereditorstate.country = country;
        app.rivereditorstate.region = region;
        app.rivereditorstate.visible = true;
    }

    function selectCountry(country) {
        app.countryeditorstate.country = country;
        app.countryeditorstate.editMode = false;
        app.countryeditorstate.visible = true
    }

    function selectRegion(country, id) {
        app.regioneditorstate.region = getRegion(id);
        app.regioneditorstate.country = country;
        app.regioneditorstate.editMode = false;
        app.regioneditorstate.visible = true
    }

    var app = new Vue({
        el: '#vue-app',
        data: {
          countries: getCountries(),
          regions: getAllRegions(),
          "spoteditorstate": {
            "visible": false,
            "editMode": false,
            "images": [],
            "schemas": []
          },
          "rivereditorstate": {
            "visible": false,
            "pageMode": 'view'
          },
          "regioneditorstate": {
            "visible": false,
            "editMode": false
          },
          "countryeditorstate": {
            "visible": false,
            "editMode": false
          },
          userInfo: getAuthorizedUserInfoOrNull(),
          treePath: {},
          selectedCountry: getActiveId(COUNTRY_ACTIVE_ENTITY_LEVEL),
          selectedRegion: getActiveId(REGION_ACTIVE_ENTITY_LEVEL),
          selectedRiver: getActiveId(RIVER_ACTIVE_ENTITY_LEVEL),
          selectedSpot: getActiveId(SPOT_ACTIVE_ENTITY_LEVEL),
          sensors: sensors,
          sensorsById: sensorsById,
          errMsg: "",
          closeCallback:function(){},
          onTreeSwitch: function (callback) {
              this.errMsg = null;
              this.closeCallback = callback;
              let t = this;

              if (!this.spoteditorstate.editMode && this.rivereditorstate.pageMode!='edit' && this.rivereditorstate.pageMode!='batch-edit') {
                  callback();
                  return;
              }

              if (this.spoteditorstate.editMode) {
                  let spotEditorCloseDialog = $('#close-spot-editor');
                  spotEditorCloseDialog.on('hidden.bs.modal', function (e) {
                      t.closeCallback = function () {

                      };
                  });
                  spotEditorCloseDialog.modal();
              }
              if (this.rivereditorstate.pageMode == 'edit' || this.rivereditorstate.pageMode == 'batch-edit') {
                  let riverEditorCloseDialog = $('#close-river-editor');
                  riverEditorCloseDialog.on('hidden.bs.modal', function (e) {
                      t.closeCallback = function () {

                      };
                  });
                  riverEditorCloseDialog.modal();
              }
          },
        }
    })

</script>

</body>
</html>